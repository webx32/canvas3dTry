function CanvasThreeD(e,t,a){this.points=e,this.center_point=t,this.connection=a,this.box=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]}function calculate_viewing_distance(e,t){var a=e/180*Math.PI;return d=t/2/Math.tan(a/2)}function perspective_project(e,t){var a=e[0],r=e[1],n=e[2];return n>0?[a*t/n,-r*t/n]:!1}CanvasThreeD.prototype.set_x_rotate=function(e){var t=e/180*Math.PI,a=[[1,0,0,0],[0,Math.cos(t),-Math.sin(t),0],[0,Math.sin(t),Math.cos(t),0],[0,0,0,1]];this.connect(a)},CanvasThreeD.prototype.set_y_rotate=function(e){var t=e/180*Math.PI,a=[[Math.cos(t),0,Math.sin(t),0],[0,1,0,0],[-Math.sin(t),0,Math.cos(t),0],[0,0,0,1]];this.connect(a)},CanvasThreeD.prototype.set_z_rotate=function(e){var t=e/180*Math.PI,a=[[Math.cos(t),-Math.sin(t),0,0],[Math.sin(t),Math.cos(t),0,0],[0,0,1,0],[0,0,0,1]];this.connect(a)},CanvasThreeD.prototype.set_translate=function(e,t,a){var r=[[1,0,0,e],[0,1,0,t],[0,0,1,a],[0,0,0,1]];this.connect(r)},CanvasThreeD.prototype.set_scale=function(e,t,a){var r=[[e,0,0,0],[0,t,0,0],[0,0,a,0],[0,0,0,1]];this.connect(r)},CanvasThreeD.prototype.connect=function(e){if(this.box.length==e[0].length){for(var t=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],a=0;a<this.box.length;++a)for(var r=0;r<this.box[0].length;++r)t[a][r]=this.box[a][r];for(var a=0;a<t[0].length;++a)for(var n=0;n<e.length;++n)for(var i=0,v=0;v<t.length;++v)i+=t[v][a]*e[n][v],v==t.length-1&&(this.box[n][a]=i)}},CanvasThreeD.prototype.mapping=function(e){for(var t=0,a=0,r=0,n=0;3>n;++n)t+=e[n]*this.box[0][n],a+=e[n]*this.box[1][n],r+=e[n]*this.box[2][n];return t+=this.box[0][3],a+=this.box[1][3],r+=this.box[2][3],[t,a,r]},CanvasThreeD.prototype.initialize_box=function(){this.box=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]},CanvasThreeD.prototype.translate_center_point=function(e){var t=this.center_point[0]+e[0],a=this.center_point[1]+e[1];this.center_point=[t,a]},CanvasThreeD.prototype.drawing=function(e,t,a){for(var r=e.getContext("2d"),n=e.width,i=calculate_viewing_distance(a,n),v=[],o=0;o<this.points.length;++o){this.points[o]=this.mapping(this.points[o]);var s=[this.points[o][0]-t[0],this.points[o][1]-t[1],this.points[o][2]-t[2]],h=perspective_project(s,i);v.push(h)}for(var o=0;o<this.connection.length;++o){var d=v[this.connection[o][0]],l=v[this.connection[o][1]];r.beginPath(),r.moveTo(d[0]+this.center_point[0],d[1]+this.center_point[1]),r.lineTo(l[0]+this.center_point[0],l[1]+this.center_point[1]),r.closePath(),r.stroke()}},CanvasThreeD.prototype.drawSphere=function(e,t,a,r,n,i){var v=e.getContext("2d"),o=e.width,s=calculate_viewing_distance(a,o);this.points[0]=this.mapping(this.points[0]);var h=[this.points[0][0]-t[0],this.points[0][1]-t[1],this.points[0][2]-t[2]],l=(perspective_project(h,s),perspective_project([this.points[0][0]-t[0],this.points[0][1]+r-t[1],this.points[0][2]-t[2]],s)),c=perspective_project([this.points[0][0]-t[0],this.points[0][1]-r-t[1],this.points[0][2]-t[2]],s),g=perspective_project([this.points[0][0]-r-t[0],this.points[0][1]-t[1],this.points[0][2]-t[2]],s),w=perspective_project([this.points[0][0]+r-t[0],this.points[0][1]-t[1],this.points[0][2]-t[2]],s);v.beginPath();for(var u=i;r>=u;u+=n){var m=perspective_project([this.points[0][0]-t[0],this.points[0][1]+r-u-t[1],this.points[0][2]-t[2]],s),_=perspective_project([this.points[0][0]-t[0],this.points[0][1]-r+u-t[1],this.points[0][2]-t[2]],s),p=perspective_project([this.points[0][0]-r+u-t[0],this.points[0][1]-t[1],this.points[0][2]-t[2]],s),b=perspective_project([this.points[0][0]+r-u-t[0],this.points[0][1]-t[1],this.points[0][2]-t[2]],s);v.strokeEllipse(p[0]+this.center_point[0],l[1]+this.center_point[1],b[0]+this.center_point[0],c[1]+this.center_point[1]),v.strokeEllipse(g[0]+this.center_point[0],m[1]+this.center_point[1],w[0]+this.center_point[0],_[1]+this.center_point[1])}v.closePath()},CanvasRenderingContext2D.prototype.strokeEllipse=function(e,t,a,r){var n=(a-e)/2,i=(r-t)/2,v=e+n,o=t+i;this.beginPath();var s=4*(Math.sqrt(2)-1)*n/3,h=4*(Math.sqrt(2)-1)*i/3;this.moveTo(v,t),this.bezierCurveTo(v+s,t,a,o-h,a,o),this.bezierCurveTo(a,o+h,v+s,r,v,r),this.bezierCurveTo(v-s,r,e,o+h,e,o),this.bezierCurveTo(e,o-h,v-s,t,v,t),this.stroke()};